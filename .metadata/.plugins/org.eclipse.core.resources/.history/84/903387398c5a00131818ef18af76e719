package com.carpooling;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import com.facebook.*;
import com.facebook.model.GraphObject;

public class MainActivity extends Activity {
    private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=";

	private TextView textInstructionsOrLink;
    private Button buttonLoginLogout;
    private Session.StatusCallback statusCallback = new SessionStatusCallback();
	private Session session;
	private Button buttonSendRequest;

	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        buttonLoginLogout = (Button)findViewById(R.id.buttonLoginLogout);
		buttonSendRequest = (Button) findViewById(R.id.btnSendRequest);
		buttonSendRequest.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View view) {
				sendRequests();
			}
		});
	    textInstructionsOrLink = (TextView)findViewById(R.id.profile_name);

        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);

        session = Session.getActiveSession();
        if (session == null) {
            if (savedInstanceState != null) {
                session = Session.restoreSession(this, null, statusCallback, savedInstanceState);
            }
            if (session == null) {
                session = new Session(this);
            }
            Session.setActiveSession(session);
            if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {
                session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
            }
        }

        updateView();
	}

    @Override
    public void onStart() {
        super.onStart();
        Session.getActiveSession().addCallback(statusCallback);
    }

    @Override
    public void onStop() {
        super.onStop();
        Session.getActiveSession().removeCallback(statusCallback);
    }

	@Override
	protected void onResume() {
		super.onResume();

		// Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
		// the onResume methods of the primary Activities that an app may be launched into.
		AppEventsLogger.activateApp(this);
	}

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        Session session = Session.getActiveSession();
        Session.saveSession(session, outState);
    }

    private void updateView() {
        Session session = Session.getActiveSession();
        if (session.isOpened()) {
            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken());
            buttonLoginLogout.setText(R.string.com_facebook_loginview_log_out_button);
            buttonLoginLogout.setOnClickListener(new OnClickListener() {
	            @Override
                public void onClick(View view) { onClickLogout(); }
            });
	        buttonSendRequest.setVisibility(Button.VISIBLE);
	        Intent carListIntent = new Intent(MainActivity.this,CarListActivity.class);
	        startActivity(carListIntent);
        } else {
	        buttonSendRequest.setVisibility(Button.GONE);
            buttonLoginLogout.setText(R.string.com_facebook_loginview_log_in_button);
            buttonLoginLogout.setOnClickListener(new OnClickListener() {
	            @Override
                public void onClick(View view) { onClickLogin(); }
            });
        }
    }

    private void onClickLogin() {
        Session session = Session.getActiveSession();
        if (!session.isOpened() && !session.isClosed()) {
	        session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
        } else {
            Session.openActiveSession(this, true, statusCallback);
        }
    }

    private void onClickLogout() {
        Session session = Session.getActiveSession();
        if (!session.isClosed()) {
            session.closeAndClearTokenInformation();
        }
    }

    private class SessionStatusCallback implements Session.StatusCallback {
        @Override
        public void call(Session session, SessionState state, Exception exception) {
            updateView();
        }
    }

	private void sendRequests() {
		//String graphPath = "/me?fields=friends.limit(10).fields(name),name";
		String graphPath = "/me";
		new Request(session, graphPath, null, HttpMethod.GET, new Request.Callback() {
			@Override
			public void onCompleted(Response response) {
				GraphObject graphObject = response.getGraphObject();
				FacebookRequestError error = response.getError();
				String s = "";
				if (graphObject != null) {
					if (graphObject.getProperty("id") != null) {
						textInstructionsOrLink.setText(graphObject.getProperty("name").toString());
						s = s + String.format("%s: %s\n", graphObject.getProperty("id"), graphObject.getProperty("name"));
					} else {
						s = s + String.format("%s: <no such id>\n", graphObject.getProperty("id"));
					}
				} else if (error != null) {
					s = s + String.format("Error: %s", error.getErrorMessage());
				}
				new AlertDialog.Builder(MainActivity.this)
						.setTitle("Risultato")
						.setMessage(s).setNeutralButton("OK",null).show();
			}
		}).executeAndWait();
	}
}
