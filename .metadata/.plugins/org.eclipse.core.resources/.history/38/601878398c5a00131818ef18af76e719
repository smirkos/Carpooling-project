package com.carpooling;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;
import com.facebook.*;
import com.facebook.model.GraphUser;
import com.facebook.widget.ProfilePictureView;

/**
 * Created with IntelliJ IDEA.
 * User: Mirko
 * Date: 30/11/13
 * Time: 1.23
 * To change this template use File | Settings | File Templates.
 */
public class CarListActivity extends Activity {
	private static final Uri M_FACEBOOK_URL = Uri.parse("http://m.facebook.com");
	private static final String TAG_LOG = "CarListActivity";
	private boolean pendingAnnounce;
	private MainActivity activity;
	private Session session;

	private UiLifecycleHelper uiHelper;
	private Session.StatusCallback sessionCallback = new Session.StatusCallback() {
		@Override
		public void call(final Session session, final SessionState state, final Exception exception) {
			onSessionStateChange(session, state, exception);
		}
	};
	private ProfilePictureView profilePictureView;
	private TextView userNameView;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.selection);

		uiHelper = new UiLifecycleHelper(this, sessionCallback);
		uiHelper.onCreate(savedInstanceState);

		userNameView = (TextView)findViewById(R.id.selection_user_name);
		profilePictureView = (ProfilePictureView)findViewById(R.id.selection_profile_pic);

		session = Session.getActiveSession();

	}

	@Override
	public void onResume() {
		super.onResume();
		uiHelper.onResume();
	}

	@Override
	public void onPause() {
		super.onPause();
		uiHelper.onPause();
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		uiHelper.onActivityResult(requestCode, resultCode, data);
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		uiHelper.onDestroy();
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		uiHelper.onSaveInstanceState(outState);
	}

	/**
	 * Notifies that the session token has been updated.
	 */
	private void tokenUpdated() {
		if (pendingAnnounce) {
			//chiama metodo invia richiesta
			Log.i(TAG_LOG, "invia richiesta dati.");
		}
	}

	private void onSessionStateChange(Session session, SessionState state, Exception exception) {
		if (session != null && session.isOpened()) {
			if (state.equals(SessionState.OPENED_TOKEN_UPDATED)) {
				tokenUpdated();
			} else {
				makeMeRequest(session);
			}
		} else {
			profilePictureView.setProfileId(null);
			userNameView.setText("");
		}
	}

	private void makeMeRequest(final Session session) {
		Log.i(TAG_LOG, "Richiesta dati profilo utente.");
		Request request = Request.newMeRequest(session, new Request.GraphUserCallback() {
			@Override
			public void onCompleted(GraphUser user, Response response) {
				if (session == Session.getActiveSession()) {
					if (user != null) {
						profilePictureView.setProfileId(user.getId());
						userNameView.setText(user.getName());
					}
				}
				if (response.getError() != null) {
					handleError(response.getError());
				}
			}
		});
		request.executeAsync();

	}

	private void handleError(FacebookRequestError error) {
		DialogInterface.OnClickListener listener = null;
		String dialogBody = null;

		if (error == null) {
			dialogBody = getString(R.string.error_dialog_default_text);
		} else {
			switch (error.getCategory()) {
				case AUTHENTICATION_RETRY:
					// tell the user what happened by getting the message id, and
					// retry the operation later
					String userAction = (error.shouldNotifyUser()) ? "" :
							getString(error.getUserActionMessageId());
					dialogBody = getString(R.string.error_authentication_retry, userAction);
					listener = new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialogInterface, int i) {
							Intent intent = new Intent(Intent.ACTION_VIEW, M_FACEBOOK_URL);
							startActivity(intent);
						}
					};
					break;

				case AUTHENTICATION_REOPEN_SESSION:
					// close the session and reopen it.
					dialogBody = getString(R.string.error_authentication_reopen);
					listener = new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialogInterface, int i) {
							Session session = Session.getActiveSession();
							if (session != null && !session.isClosed()) {
								session.closeAndClearTokenInformation();
							}
						}
					};
					break;

				case SERVER:
				case THROTTLING:
					// this is usually temporary, don't clear the fields, and
					// ask the user to try again
					dialogBody = getString(R.string.error_server);
					break;

				case BAD_REQUEST:
					// this is likely a coding error, ask the user to file a bug
					dialogBody = getString(R.string.error_bad_request, error.getErrorMessage());
					break;

				case OTHER:
				case CLIENT:
				default:
					// an unknown issue occurred, this could be a code error, or
					// a server side issue, log the issue, and either ask the
					// user to retry, or file a bug
					dialogBody = getString(R.string.error_unknown, error.getErrorMessage());
					break;
			}
		}
	}

}